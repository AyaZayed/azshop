generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id String @id @unique
  email String
  firstName String
  lastName String
  created_at DateTime @default(now())
  reviews Review[]
  orders Order[]
  stripeCustomerId String?
}

model Product {
  id String @id @default(uuid())
  name String @unique
  description String
  price Float
  status ProductStatus
  inStock Int
  orderItems OrderItem[]
  isFeatured Boolean @default(false)
  images String[]
  created_at DateTime @default(now())
  category Category

  reviews Review[]
  reviewsCount Int @default(0)
  rating Float? @default(0)
  ratingSum Int @default(0)

  how_to String
  scent String @default("fragrance free")
  size Int 
  type Type
  ingredients String
}

model Order {
  id String @id @default(uuid())
  status String @default("pending")
  createdAt DateTime @default(now())
  user User? @relation(fields:[userId], references: [id]) 
  userId String?
  items OrderItem[]
  stripeSessionId     String?     
  paymentStatus       PaymentStatus @default(PENDING)
  guestId             String?    
  total               Float      
}

model OrderItem{
  id String @id @default(uuid())
  order Order @relation(fields: [orderId],references: [id])
  orderId String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  unitPrice Float
}

model Review{
  id String @id @default(uuid())
  headline String
  content String
  rating Int 
  author String
  created_at DateTime @default(now())

  productId String
  userId String?
  guestId String?
  product Product @relation(fields: [productId], references: [id])
  user User? @relation(fields: [userId], references: [id])
}

enum ProductStatus {
  draft
  published
  archived
}

enum Category {
  sunscreen
  repair 
  sets
  gifts
}

enum Type {
  face
  body
  both
  other
}

enum PaymentStatus {
  PENDING
  PAID
  REQUIRES_ACTION
  FAILED
  REFUNDED
}

